stages:
  - testing
  # - scanning
  - building
  - deploying


variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_TAG: "containe$CI_REGISTRY_IMAGE"
  APP_PORT: 5000
  APP_EXPOSE_PORT: 4000
go-test:
  stage: testing
  script:
    - yarn install && yarn test
  tags:
    - local

# sonarqube-check:
#   stage: scanning
#   image:
#      name: sonarsource/sonar-scanner-cli:latest
#      entrypoint: [""]
#   variables:
#      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#      GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#      key: "${CI_JOB_NAME}"
#      paths:
#        - .sonar/cache
#   script:
#      - sonar-scanner
#   allow_failure: true
#   tags:
#      - local-docker
#   only: 
#     - develop
#     - main

docker-build:
  stage: building
  script:
    - echo "$CI_DEPLOY_PASSWORD $CI_REGISTRY"
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker build --pull --build-arg LOG_PROVIDER_CREDENTIAL=$AWS_CLOUDWATCH_CONFIG -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  tags:
    - local
  only:
    - develop
deploy:
  stage: deploying
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -tt -o StrictHostKeyChecking=no savvycom@10.22.4.168 "./deploy.sh $IMAGE_TAG $APP_PORT $APP_EXPOSE_PORT $CI_DEPLOY_USER $CI_DEPLOY_PASSWORD && exit"
  tags:
    - local
  only:
    - develop
